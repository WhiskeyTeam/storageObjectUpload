name: Docker Image CI

on:
  push:
    branches: 
      - "main"
      - "devel"
  pull_request:
    branches: 
      - "main"
      - "devel"
    paths:
      - '**.java'
      - '**/build.gradle*'
      - '**/settings.gradle*'
      - '**/application*.yml'
      - '**.sql'

jobs:
  build:
    if: github.repository == 'WhiskeyTeam/storageObjectUpload'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    # - name: Set YML
    #   run: |
    #     mkdir -p src/main/resources
    #     echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
    #     find src
    - name: Grant permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew clean build -x test
    - name: Docker build and publish
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}-${{ github.ref_name }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}-${{ github.ref_name }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: NCP SSH Login and Docker Image pull and run
      if: github.ref == 'refs/heads/main'  # main 브랜치에 대한 조건
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.NCP_HOST }}
        username: ${{ secrets.NCP_USERNAME }}
        password: ${{ secrets.NCP_PASSWORD }}
        key: ${{ secrets.NCP_KEY }}
        port: ${{ secrets.NCP_PORT }}
        script: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker stop ${{ vars.APP_NAME }}
          sudo docker rm -f ${{ vars.APP_NAME }}
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}-main
          sudo docker run -d --name ${{ vars.APP_NAME }} -p 8083:8080 ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}-main
          sudo docker image prune -f
